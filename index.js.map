{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["/**У файлі pixabay-api.js зберігай функції для виконання HTTP-запитів:\n * getImagesByQuery(query). Ця функція повинна приймати один параметр query\n *  (пошукове слово, яке є рядком), здійснювати HTTP-запит і повертати значення властивості data з отриманої відповіді. */\nimport axios from 'axios';\n\nconst API_KEY = '49617866-877f488ac6d2fa69158bf0643';\nconst BASE_URL = 'https://pixabay.com/api/';\n\nexport async function getImagesByQuery(query) {\n  const response = await axios.get(BASE_URL, {\n    params: {\n      key: API_KEY,\n      q: query,\n      image_type: 'photo',\n      orientation: 'horizontal',\n      safesearch: true,\n    },\n  });\n  return response.data.hits;\n}\n","/**У файлі render-functions.js створи екземпляр SimpleLightbox для роботи з модальним вікном\n *  та зберігай функції для відображення елементів інтерфейсу:\n * createGallery(images). Ця функція повинна приймати масив images, \n * створювати HTML-розмітку для галереї, додавати її в контейнер галереї \n * та викликати метод екземпляра SimpleLightbox refresh(). Нічого не повертає.\nclearGallery(). Ця функція нічого не приймає та повинна очищати вміст контейнера галереї. Нічого не повертає.\nshowLoader(). Ця функція нічого не приймає, повинна додавати клас для відображення лоадера. Нічого не повертає.\nhideLoader(). Ця функція нічого не приймає, повинна прибирати клас для відображення лоадера. Нічого не повертає. */\n/**Робота модального вікна пов'язана з самою галереєю, тому використання бібліотеки SimpleLightbox\n * і методу екземпляру refresh() буде доцільним у файлі render-functions.js. */\n\n\nconst gallery = document.querySelector('.gallery');\n\nexport function createGallery(images) {\n  const markup = images\n    .map(\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => `\n    <li class=\"gallery-item\">\n      <a href=\"${largeImageURL}\">\n        <img src=\"${webformatURL}\" alt=\"${tags}\" />\n      </a>\n      <div class=\"info\">\n        <p><b>Likes:</b> ${likes}</p>\n        <p><b>Views:</b> ${views}</p>\n        <p><b>Comments:</b> ${comments}</p>\n        <p><b>Downloads:</b> ${downloads}</p>\n      </div>\n    </li>\n  `\n    )\n    .join('');\n  gallery.innerHTML = markup;\n  /*lightbox.refresh(); // Оновлення SimpleLightbox після додавання нових зображень*/\n}\n\nexport function clearGallery() {\n  gallery.innerHTML = '';\n}\n\nexport function showLoader() {\n  /*console.log(' Лоадер Показано');*/\n  document.querySelector('.loader').classList.remove('hidden');\n}\n\nexport function hideLoader() {\n  /*console.log(' Лоадер Приховано');*/\n  document.querySelector('.loader').classList.add('hidden');\n}\n","/**У файлі main.js напиши всю логіку роботи додатка.\n * Виклики нотифікацій iziToast, усі перевірки на довжину масиву в отриманій відповіді робимо саме в цьому файлі.\n *  Імпортуй в нього функції із файлів pixabay-api.js та render-functions.js та викликай їх у відповідний момент. */\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\nimport { getImagesByQuery } from './js/pixabay-api';\nimport {\n  createGallery,\n  clearGallery,\n  showLoader,\n  hideLoader,\n} from './js/render-functions';\nconst lightbox = new SimpleLightbox('.gallery a', {\n  captionSelector: 'img',\n  captionsData: 'alt',\n  captionPosition: 'bottom',\n  captionDelay: 250,\n});\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const query = event.target.elements['search-text'].value.trim();\n  if (!query) {\n    iziToast.error({ message: 'Please enter a search term!' });\n    return;\n  }\n\n  clearGallery();\n  showLoader();\n\n  try {\n    const images = await getImagesByQuery(query);\n\n    if (images.length === 0) {\n      iziToast.warning({\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n      });\n    } else {\n      createGallery(images);\n      lightbox.refresh();\n    }\n  } catch (error) {\n    iziToast.error({\n      message: 'Something went wrong. Please try again later.',\n    });\n  } finally {\n    hideLoader();\n    event.target.reset();\n  }\n});\n"],"names":["API_KEY","BASE_URL","getImagesByQuery","query","axios","gallery","createGallery","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","clearGallery","showLoader","hideLoader","lightbox","SimpleLightbox","form","event","iziToast"],"mappings":"owBAKA,MAAMA,EAAU,qCACVC,EAAW,2BAEV,eAAeC,EAAiBC,EAAO,CAU5C,OATiB,MAAMC,EAAM,IAAIH,EAAU,CACzC,OAAQ,CACN,IAAKD,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EACb,CACL,CAAG,GACe,KAAK,IACvB,CCPA,MAAME,EAAU,SAAS,cAAc,UAAU,EAE1C,SAASC,EAAcC,EAAQ,CACpC,MAAMC,EAASD,EACZ,IACC,CAAC,CACC,aAAAE,EACA,cAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACR,IAAY;AAAA;AAAA,iBAEKL,CAAa;AAAA,oBACVD,CAAY,UAAUE,CAAI;AAAA;AAAA;AAAA,2BAGnBC,CAAK;AAAA,2BACLC,CAAK;AAAA,8BACFC,CAAQ;AAAA,+BACPC,CAAS;AAAA;AAAA;AAAA,GAInC,EACA,KAAK,EAAE,EACVV,EAAQ,UAAYG,CAEtB,CAEO,SAASQ,GAAe,CAC7BX,EAAQ,UAAY,EACtB,CAEO,SAASY,GAAa,CAE3B,SAAS,cAAc,SAAS,EAAE,UAAU,OAAO,QAAQ,CAC7D,CAEO,SAASC,GAAa,CAE3B,SAAS,cAAc,SAAS,EAAE,UAAU,IAAI,QAAQ,CAC1D,CCzCA,MAAMC,EAAW,IAAIC,EAAe,aAAc,CAChD,gBAAiB,MACjB,aAAc,MACd,gBAAiB,SACjB,aAAc,GAChB,CAAC,EACKC,EAAO,SAAS,cAAc,OAAO,EAE3CA,EAAK,iBAAiB,SAAU,MAAMC,GAAS,CAC7CA,EAAM,eAAc,EAEpB,MAAMnB,EAAQmB,EAAM,OAAO,SAAS,aAAa,EAAE,MAAM,OACzD,GAAI,CAACnB,EAAO,CACVoB,EAAS,MAAM,CAAE,QAAS,6BAA+B,CAAA,EACzD,MACD,CAEDP,IACAC,IAEA,GAAI,CACF,MAAMV,EAAS,MAAML,EAAiBC,CAAK,EAEvCI,EAAO,SAAW,EACpBgB,EAAS,QAAQ,CACf,QACE,0EACV,CAAO,GAEDjB,EAAcC,CAAM,EACpBY,EAAS,QAAO,EAEnB,MAAe,CACdI,EAAS,MAAM,CACb,QAAS,+CACf,CAAK,CACL,QAAY,CACRL,IACAI,EAAM,OAAO,OACd,CACH,CAAC"}